name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the code from the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up Node.js in the GitHub Actions environment
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20.18.0'

      # Step 3: Install dependencies and build the main frontend (assuming it's in `src/frontend`)
      - name: Install and Build Main Frontend
        working-directory: ./src/frontend
        run: |
          npm install
          npm run build

      # Step 4: Install dependencies and build the backend frontend (if applicable)
      # If you have a separate frontend build under `src/backend/frontend`, you can add this step
      - name: Install and Build Backend Frontend (if applicable)
        working-directory: ./src/backend/frontend
        run: |
          npm install
          npm run build

      # Step 5: Create a temporary PEM file for the EC2 key from GitHub Secret
      - name: Add EC2 PEM Key
        env:
          EC2_PEM_KEY: ${{ secrets.SMILEYCREATIONS_PEM }}
        run: |
          echo "$EC2_PEM_KEY" > ec2_key.pem
          chmod 400 ec2_key.pem

      # Step 6: Copy backend and main frontend build to the EC2 instance
      - name: Deploy Application to EC2
        run: |
          ssh -i ec2_key.pem -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_HOST }} "sudo rm -rf /var/www/backend /var/www/frontend_deploy && sudo mkdir -p /var/www/backend /var/www/frontend_deploy && sudo chown -R ec2-user:ec2-user /var/www"

          # Copy backend
          scp -i ec2_key.pem -o StrictHostKeyChecking=no -r ./src/backend/* ec2-user@${{ secrets.EC2_HOST }}:/var/www/backend

          # Copy main frontend build
          scp -i ec2_key.pem -o StrictHostKeyChecking=no -r ./src/frontend/build/* ec2-user@${{ secrets.EC2_HOST }}:/var/www/frontend_deploy

      # Step 7: Create the .env file on EC2 using GitHub Secrets
      - name: Add environment variables on EC2
        run: |
          ssh -i ec2_key.pem -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_HOST }} << 'EOF'
            echo "DB_HOST=${{ secrets.DB_HOST }}" >> /var/www/backend/.env
            echo "DB_USER=${{ secrets.DB_USER }}" >> /var/www/backend/.env
            echo "DB_NAME=${{ secrets.DB_NAME }}" >> /var/www/backend/.env
            echo "DB_PORT=${{ secrets.DB_PORT }}" >> /var/www/backend/.env
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> /var/www/backend/.env
            echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> /var/www/backend/.env
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> /var/www/backend/.env
            echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> /var/www/backend/.env
            echo "S3_MAIN_BUCKET_NAME=${{ secrets.S3_MAIN_BUCKET_NAME }}" >> /var/www/backend/.env
            echo "S3_ADDITIONAL_BUCKET_NAME=${{ secrets.S3_ADDITIONAL_BUCKET_NAME }}" >> /var/www/backend/.env
            echo "NODE_ENV=${{ secrets.NODE_ENV }}" >> /var/www/backend/.env
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> /var/www/backend/.env
          EOF

      # Step 8: Install backend dependencies on EC2
      - name: Install Backend Dependencies on EC2
        run: |
          ssh -i ec2_key.pem -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_HOST }} << 'EOF'
            cd /var/www/backend
            npm install --production
          EOF

      # Step 9: Restart the backend service on EC2
      - name: Restart Backend Service on EC2
        run: |
          ssh -i ec2_key.pem -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_HOST }} << 'EOF'
            if ! command -v pm2 &> /dev/null; then
              npm install -g pm2
            fi

            cd /var/www/backend
            pm2 restart backend || pm2 start server.js --name "backend"
          EOF

      # Step 10: Restart NGINX to serve the new frontend build
      - name: Restart NGINX
        run: |
          ssh -i ec2_key.pem -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_HOST }} << 'EOF'
            sudo systemctl restart nginx
          EOF

      # Step 11: Clean up the temporary PEM file for security
      - name: Clean Up
        run: rm -f ec2_key.pem
