name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    # Paso 1: Chequear el código desde el repositorio
    - name: Checkout code
      uses: actions/checkout@v2

    # Paso 2: Configurar Node.js en el entorno de GitHub Actions
    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '20.18.0' # Usando la versión 20.18.0 de Node.js

    # Paso 3: Instalar dependencias y construir el frontend en GitHub Actions
    - name: Install and Build Frontend
      working-directory: ./src/frontend
      run: |
        npm install
        CI=false npm run build

    # Paso 4: Crear archivo temporal para la clave PEM de EC2 desde GitHub Secret
    - name: Add EC2 PEM Key
      env:
        EC2_PEM_KEY: ${{ secrets.SMILEYCREATIONS_PEM }}
      run: |
        echo "$EC2_PEM_KEY" > ec2_key.pem
        chmod 400 ec2_key.pem

    # Paso 5: Copiar el backend y solo el build del frontend a la instancia EC2
    - name: Deploy Application to EC2
      run: |
        # Crear directorios en EC2 y transferir archivos
        ssh -i ec2_key.pem -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_HOST }} "sudo rm -rf /var/www/backend /var/www/frontend_deploy && sudo mkdir -p /var/www/backend /var/www/frontend_deploy && sudo chown -R ec2-user:ec2-user /var/www"
        
        # Copiar el backend completo
        scp -i ec2_key.pem -o StrictHostKeyChecking=no -r ./src/backend/* ec2-user@${{ secrets.EC2_HOST }}:/var/www/backend

        # Copiar solo el contenido del build del frontend
        scp -i ec2_key.pem -o StrictHostKeyChecking=no -r ./src/frontend/build/* ec2-user@${{ secrets.EC2_HOST }}:/var/www/frontend_deploy

    # Paso 6: Crear el archivo .env en el servidor EC2 usando los secretos de GitHub
    - name: Add environment variables on EC2
      run: |
        ssh -i ec2_key.pem -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_HOST }} << 'EOF'
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> /var/www/backend/.env
          echo "DB_USER=${{ secrets.DB_USER }}" >> /var/www/backend/.env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> /var/www/backend/.env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> /var/www/backend/.env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> /var/www/backend/.env
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> /var/www/backend/.env
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> /var/www/backend/.env
          echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> /var/www/backend/.env
          echo "S3_MAIN_BUCKET_NAME=${{ secrets.S3_MAIN_BUCKET_NAME }}" >> /var/www/backend/.env
          echo "S3_ADDITIONAL_BUCKET_NAME=${{ secrets.S3_ADDITIONAL_BUCKET_NAME }}" >> /var/www/backend/.env
          echo "NODE_ENV=${{ secrets.NODE_ENV }}" >> /var/www/backend/.env
          echo "COGNITO_USER_POOL=${{ secrets.COGNITO_USER_POOL }}" >> /var/www/backend/.env
          echo "COGNITO_CLIENT_ID=${{ secrets.COGNITO_CLIENT_ID }}" >> /var/www/backend/.env
        EOF

    # Paso 7: Conectar a la instancia EC2 y ejecutar la instalación en el backend
    - name: Install Backend Dependencies on EC2
      run: |
        ssh -i ec2_key.pem -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_HOST }} << 'EOF'
          # Cambiar al directorio del backend e instalar dependencias
          cd /var/www/backend
          npm install --production
        EOF

    # Paso 8: Conectar a la instancia EC2 y reiniciar el backend
    - name: Restart Backend Service on EC2
      run: |
        ssh -i ec2_key.pem -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_HOST }} << 'EOF'
          # Asegurarse de que PM2 esté instalado
          if ! command -v pm2 &> /dev/null; then
            npm install -g pm2
          fi

          # Navegar al backend y reiniciar con PM2
          cd /var/www/backend
          pm2 restart backend || pm2 start server.js --name "backend"
        EOF

    # Paso 9: Reiniciar NGINX para servir el nuevo build del frontend
    - name: Restart NGINX
      run: |
        ssh -i ec2_key.pem -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_HOST }} << 'EOF'
          sudo systemctl restart nginx
        EOF

    # Paso 10: Eliminar el archivo PEM temporal para seguridad
    - name: Clean Up
      run: rm -f ec2_key.pem
