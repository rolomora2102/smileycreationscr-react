name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    # Paso 1: Chequear el código desde el repositorio
    - name: Checkout code
      uses: actions/checkout@v2

    # Paso 2: Configurar Node.js en el entorno de GitHub Actions
    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '20.18.0' # Usando la versión 20.18.0 de Node.js

    # Paso 3: Instalar dependencias y construir el frontend
    - name: Install and Build Frontend
      working-directory: ./src/frontend
      run: |
        npm install
        CI=false npm run build

    # Paso 4: Instalar dependencias del backend
    - name: Install Backend Dependencies
      working-directory: ./src/backend
      run: |
        npm install

    # Paso 5: Crear archivo temporal para la clave PEM de EC2 desde GitHub Secret
    - name: Add EC2 PEM Key
      env:
        EC2_PEM_KEY: ${{ secrets.SMILEYCREATIONS_PEM }}
      run: |
        echo "$EC2_PEM_KEY" > ec2_key.pem
        chmod 400 ec2_key.pem

    # Paso 6: Copiar el backend y el build del frontend a la instancia EC2
    - name: Deploy Application to EC2
      run: |
        # Comprimir solo el contenido de backend y el build del frontend
        zip -r backend.zip ./src/backend/* -x "*/node_modules/*"
        zip -r frontend.zip ./src/frontend/build
    
        # Crear directorios en EC2 y transferir los archivos comprimidos
        ssh -i ec2_key.pem -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_HOST }} "sudo rm -rf /var/www/backend /var/www/frontend && sudo mkdir -p /var/www/backend /var/www/frontend && sudo chown -R ec2-user:ec2-user /var/www"
        scp -i ec2_key.pem -o StrictHostKeyChecking=no backend.zip ec2-user@${{ secrets.EC2_HOST }}:/var/www
        scp -i ec2_key.pem -o StrictHostKeyChecking=no frontend.zip ec2-user@${{ secrets.EC2_HOST }}:/var/www
    
        # Conectar a la instancia, descomprimir y limpiar
        ssh -i ec2_key.pem -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_HOST }} << 'EOF'
          cd /var/www
    
          # Eliminar contenido anterior y descomprimir backend y frontend
          rm -rf backend/* frontend/*
          unzip -o backend.zip -d backend
          unzip -o frontend.zip -d frontend

          # Instalar dependencias en backend y limpiar archivos zip
          cd backend
          npm install --production
          rm ../backend.zip ../frontend.zip
        EOF

    # Paso 7: Conectar a la instancia EC2 y reiniciar el backend
    - name: Restart Backend Service on EC2
      run: |
        ssh -i ec2_key.pem -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_HOST }} << 'EOF'
          # Asegurarse de que PM2 esté instalado
          if ! command -v pm2 &> /dev/null; then
            npm install -g pm2
          fi

          # Navegar al backend y reiniciar con PM2
          cd /var/www/backend
          pm2 restart backend || pm2 start server.js --name "backend"

          # Reiniciar NGINX para aplicar cambios
          sudo systemctl restart nginx
        EOF

    # Paso 8: Eliminar el archivo PEM temporal para seguridad
    - name: Clean Up
      run: rm -f ec2_key.pem
